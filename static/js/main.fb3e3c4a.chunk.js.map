{"version":3,"sources":["pages/logo.svg","pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","HomePage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","checkState","state","activeItem","hasSendRequest","hasLoggedIn","userId","userName","userImage","_this2","values","queryString","parse","location","search","login_code","code","login_state","console","log","undefined","setState","data","axios","post","Content-Type","then","response","decoded","jwt_decode","id_token","sub","name","picture","userImageUrl","catch","error","react_default","a","createElement","Grid","Row","columns","style","padding","Segment","raised","background","margin","flex","Column","width","Image","height","src","Header","as","color","Menu","fluid","vertical","tabular","Item","active","onClick","handleItemClick","stretched","Component","App","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.fb3e3c4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component}  from 'react';\r\nimport logo from './logo.svg';\r\nimport queryString from 'query-string';\r\nimport axios from 'axios';\r\nimport jwt_decode from 'jwt-decode';\r\nimport './App.css';\r\nimport { Grid, Menu, Image, Header, Container, Segment } from 'semantic-ui-react'\r\n\r\nexport default class HomePage extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      activeItem: 'bio',\r\n      hasSendRequest: false,\r\n      hasLoggedIn: false,\r\n      userId: \"\",\r\n      userName: \"\",\r\n      userImage: \"\"\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const values = queryString.parse(this.props.location.search);\r\n    const login_code = values.code;\r\n    const login_state = values.state;\r\n    console.log(\"code: \" + login_code + \"\\nstate: \" + login_state);\r\n\r\n    if(login_code !== undefined) {\r\n      this.setState({\r\n        hasSendRequest: true\r\n      });\r\n      const server_login_url = \"https://nogerm-demo-test.herokuapp.com/login\";\r\n      const headers = {\r\n        'Content-Type': 'application/json'\r\n      }\r\n      const data = {\r\n        code: login_code,\r\n        state: login_state\r\n      }\r\n      axios.post(server_login_url, data, headers)\r\n      .then(response => {\r\n        const decoded = jwt_decode(response.data.id_token);\r\n        console.log(\"[login]\\nuser id: \" + decoded.sub + \"\\nuser name: \" + decoded.name + \"\\nuser image url: \" + decoded.picture);\r\n        this.setState({\r\n          userId: decoded.sub || \"\",\r\n          userName: decoded.name || \"\",\r\n          userImageUrl: decoded.picture || \"\",\r\n          hasLoggedIn: true\r\n        });\r\n      })\r\n      .catch(error => {\r\n        console.log(\"[login] error\" + error);\r\n      });\r\n    }\r\n\r\n\r\n  }\r\n\r\n  checkState = () => {\r\n\r\n  }\r\n\r\n  handleClick() {\r\n    \r\n  }\r\n\r\n\trender() {\r\n    const { activeItem } = this.state\r\n    const userName = this.state.userName;\r\n    const userImageUrl = this.state.userImage;\r\n    const loginUrl = \"https://access.line.me/oauth2/v2.1/authorize?response_type=code&client_id=1554176659&redirect_uri=https://nogerm.github.io/church-backend&state=1234&scope=openid%20profile\";\r\n    return (\r\n      <Grid>\r\n        <Grid.Row columns={1} style={{padding: '0px'}}>\r\n          <Segment raised style={{background: '#9ccc65', margin: '0px', flex:1}}>\r\n          <Grid>\r\n            <Grid.Column width={1}>\r\n              <Image style={{height:'40px'}} src='https://886point.com/wp-content/uploads/2018/07/icon512-2x-600x600.png'/>\r\n            </Grid.Column>\r\n            <Grid.Column width={15}>\r\n              <Header as='H1' style={{color:'white'}}>LINE Console</Header>\r\n            </Grid.Column>\r\n            </Grid>\r\n          </Segment>\r\n        </Grid.Row>\r\n        <Grid.Row columns={2}>\r\n          <Grid.Column width={3}>\r\n            <Menu fluid vertical tabular>\r\n              <Menu.Item name='bio' active={activeItem === 'bio'} onClick={this.handleItemClick} />\r\n              <Menu.Item name='pics' active={activeItem === 'pics'} onClick={this.handleItemClick} />\r\n              <Menu.Item\r\n                name='companies'\r\n                active={activeItem === 'companies'}\r\n                onClick={this.handleItemClick}\r\n              />\r\n              <Menu.Item\r\n                name='links'\r\n                active={activeItem === 'links'}\r\n                onClick={this.handleItemClick}\r\n              />\r\n            </Menu>\r\n          </Grid.Column>\r\n\r\n          <Grid.Column stretched width={12}>\r\n            <Segment>\r\n              This is an stretched grid column. This segment will always match the tab height\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\t\r\n}","import React, { Component } from 'react';\r\nimport { Route, Switch } from \"react-router-dom\"\r\nimport HomePage from \"./pages/HomePage\";\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path='/:code?/:state?' component={HomePage} exact={true} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <BrowserRouter>\r\n    <App />\r\n  </BrowserRouter>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}