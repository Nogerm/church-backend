{"version":3,"sources":["pages/HomePage.js","App.js","serviceWorker.js","index.js","pages/logo.svg"],"names":["HomePage","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasSendRequest","hasLoggedIn","userId","userName","userImage","values","queryString","parse","location","search","login_code","code","login_state","console","log","undefined","data","axios","post","Content-Type","then","response","decoded","jwt_decode","id_token","sub","name","picture","setState","userImageUrl","catch","error","react_default","a","createElement","AppBar_default","position","Toolbar_default","Typography_default","variant","color","Avatar_default","alt","src","Button_default","href","logo","className","Component","App","Switch","Route","path","component","exact","Boolean","window","hostname","match","ReactDOM","render","BrowserRouter","App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wXAYqBA,cAEnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,gBAAgB,EAChBC,aAAa,EACbC,OAAQ,GACRC,SAAU,GACVC,UAAW,IAPIZ,mFAYjB,IAAMa,EAASC,IAAYC,MAAMZ,KAAKJ,MAAMiB,SAASC,QAC/CC,EAAaL,EAAOM,KACpBC,EAAcP,EAAON,MAG3B,GAFAc,QAAQC,IAAI,SAAWJ,EAAa,YAAcE,QAEhCG,IAAfL,EAA0B,CAC3B,IAIMM,EAAO,CACXL,KAAMD,EACNX,MAAOa,GAETK,IAAMC,KARmB,+CAQIF,EAPb,CACdG,eAAgB,qBAOjBC,KAAK,SAAUC,GACd,IAAMC,EAAUC,IAAWF,EAASL,KAAKQ,UACzCX,QAAQC,IAAI,oBAAsBQ,EAAQG,IAAM,gBAAkBH,EAAQI,KAAO,qBAAuBJ,EAAQK,SAChHhC,KAAKiC,SAAS,CACZ1B,OAAQoB,EAAQG,IAChBtB,SAAUmB,EAAQI,KAClBG,aAAcP,EAAQK,YAGzBG,MAAM,SAAUC,GACflB,QAAQC,IAAI,gBAAkBiB,8EAYlC,IAAM5B,EAAWR,KAAKI,MAAMI,SACtB0B,EAAelC,KAAKI,MAAMK,UAEhC,OAED4B,EAAAC,EAAAC,cAAA,WACKF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,SAAS,UACfJ,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,KACED,EAAAC,EAAAC,cAACI,EAAAL,EAAD,CAAYM,QAAQ,KAAKC,MAAM,WAA/B,YAGAR,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAQS,IAAI,aAAaC,IAAKd,IAC9BG,EAAAC,EAAAC,cAAA,SAAI/B,GACJ6B,EAAAC,EAAAC,cAACU,EAAAX,EAAD,CAAQM,QAAQ,YAAaC,MAAM,UAAUK,KAXpC,+KAWT,qBAKFb,EAAAC,EAAAC,cAAA,OAAKS,IAAKG,IAAMC,UAAU,WAAWL,IAAI,SACzCV,EAAAC,EAAAC,cAAA,8BAtE4Bc,aCRjBC,mLAEjB,OACEjB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOC,KAAK,kBAAkBC,UAAW/D,EAAUgE,OAAO,YAJjCN,aCQbO,QACW,cAA7BC,OAAOhD,SAASiD,UAEe,UAA7BD,OAAOhD,SAASiD,UAEhBD,OAAOhD,SAASiD,SAASC,MACvB,wECZNC,IAASC,OACP5B,EAAAC,EAAAC,cAAC2B,EAAA,EAAD,KACE7B,EAAAC,EAAAC,cAAC4B,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.81c271a9.chunk.js","sourcesContent":["import React, { Component}  from 'react';\nimport logo from './logo.svg';\nimport queryString from 'query-string';\nimport axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nimport './App.css';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport Avatar from '@material-ui/core/Avatar';\n\nexport default class HomePage extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasSendRequest: false,\n      hasLoggedIn: false,\n      userId: \"\",\n      userName: \"\",\n      userImage: \"\"\n    };\n  }\n\n  componentDidMount() {\n    const values = queryString.parse(this.props.location.search);\n    const login_code = values.code;\n    const login_state = values.state;\n    console.log(\"code: \" + login_code + \"\\nstate: \" + login_state);\n\n    if(login_code !== undefined) {\n      const server_login_url = \"https://nogerm-demo-test.herokuapp.com/login\";\n      const headers = {\n        'Content-Type': 'application/json'\n      }\n      const data = {\n        code: login_code,\n        state: login_state\n      }\n      axios.post(server_login_url, data, headers)\n      .then(function (response) {\n        const decoded = jwt_decode(response.data.id_token);\n        console.log(\"[login] user id: \" + decoded.sub + \"\\nuser name: \" + decoded.name + \"\\nuser image url: \" + decoded.picture);\n        this.setState({\n          userId: decoded.sub,\n          userName: decoded.name,\n          userImageUrl: decoded.picture\n        });\n      })\n      .catch(function (error) {\n        console.log(\"[login] error\" + error);\n      });\n    }\n\n\n  }\n\n  handleClick() {\n    \n  }\n\n\trender() {\n    const userName = this.state.userName;\n    const userImageUrl = this.state.userImage;\n    const loginUrl = \"https://access.line.me/oauth2/v2.1/authorize?response_type=code&client_id=1554176659&redirect_uri=https://nogerm.github.io/church-backend&state=1234&scope=openid%20profile\";\n    return (\n\n\t\t\t<div>\n        <AppBar position=\"static\">\n          <Toolbar>\n            <Typography variant=\"h6\" color=\"inherit\">\n              Settings\n            </Typography>\n            <Avatar alt=\"Remy Sharp\" src={userImageUrl}/>\n            <p>{userName}</p>\n            <Button variant=\"contained\"  color=\"inherit\" href={loginUrl}>\n              Login with LINE\n            </Button>\n          </Toolbar>\n        </AppBar>\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Home Page\n          </p>\n      </div>\n    );\n  }\n\t\n}","import React, { Component } from 'react';\nimport { Route, Switch } from \"react-router-dom\"\nimport HomePage from \"./pages/HomePage\";\n\nexport default class App extends Component {\n  render() {\n    return (\n      <Switch>\n        <Route path='/:code?/:state?' component={HomePage} exact={true} />\n      </Switch>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}